import time 
import sys 
import ibmiotf.application 
import ibmiotf.device 
import random 
# Provide your IBM Watson Device Credentials 
organization = "gh6uoi" 
deviceType = "fire" 
deviceId = "fire123" 
authMethod = "token" 
authToken = "0123456789" 
 # print(cmd) 
try : 
    deviceOptions = {"org" : organization, "type" : deviceType, "id" : deviceId, "auth-method" : authMethod, 
                     "auth-token" : authToken} 
    deviceCli = ibmiotf.device.Client ( deviceOptions ) 
# .............................................. 
except Exception as e : 
    print ( "Caught exception connecting device: %s" % str ( e ) ) 
    sys.exit () 
# Connect and send a datapoint "hello" with value "world" into the cloud as an event of type "greeting" 10 times 
deviceCli.connect () 
 
def myCommandCallback(cmd) : 
    print ( "Command received: %s" % cmd.data['command'] ) 
    status = cmd.data['command'] 
def myCommandCallback(cmd) : 
    print ( "Command received: %s" % cmd.data['command'] ) 
    status = cmd.data['command'] 
def myCommandCallback(cmd) : 
    print ( "Command received: %s" % cmd.data['command'] ) 
    status = cmd.data['command'] 
while True : 
    # Get Sensor Data from DHT11 
    temp = random.randint ( 0, 100 ) 
    gas = random.randint ( 60, 200 ) 
    flame = random.randint ( 60, 200 ) 
    data = {'temp' : temp, 'Gas' : gas,'Flame': flame} 
    # print data 
    def myOnPublishCallback() : 
        print ( "Published Temperature = %s C" % temp, "Gas = %s %%" % gas, "Flame = %s %%" % flame, "to IBM Watson") 
    success = deviceCli.publishEvent ( "IoTSensor", "json", data, qos = 0, on_publish = myOnPublishCallback ) 
    if not success : 
        print ( "Not connected to IoTF" ) 
    time.sleep ( 1 ) 
    deviceCli.commandCallback = myCommandCallback 
# Initialize GPIO 
    if temp > 50 : 
        print ( "buzzer is on" ) 
    else : 
        print ( "buzzer is off" ) 
    if flame > 100 : 
        print ( "sprinklers are on" ) 
    else : 
        print ( "sprinklers are off" ) 
    if gas>100: 
        print ( "exhaust fan is on" ) 
    else : 
        print ( "exhaust fan is off" ) 
# Disconnect the device and application from the cloud 
deviceCli.disconnect ()
